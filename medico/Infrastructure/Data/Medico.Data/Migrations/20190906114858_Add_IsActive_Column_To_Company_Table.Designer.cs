// <auto-generated />
using System;
using Medico.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Medico.Data.Migrations
{
    [DbContext(typeof(MedicoContext))]
    [Migration("20190906114858_Add_IsActive_Column_To_Company_Table")]
    partial class Add_IsActive_Column_To_Company_Table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Medico.Domain.Models.Admission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("AdmissionData")
                        .IsRequired();

                    b.Property<Guid>("AppointmentId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("PatientId");

                    b.Property<Guid?>("SignatureInfoId");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.ToTable("Admission");
                });

            modelBuilder.Entity("Medico.Domain.Models.AlcoholHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int?>("Amount");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Duration")
                        .HasMaxLength(100);

                    b.Property<string>("Frequency")
                        .HasMaxLength(100);

                    b.Property<int?>("Length");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000);

                    b.Property<Guid>("PatientId");

                    b.Property<bool?>("Quit");

                    b.Property<string>("Status")
                        .HasMaxLength(100);

                    b.Property<int?>("StatusLength");

                    b.Property<string>("StatusLengthType")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.Property<string>("Use")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("AlcoholHistory");
                });

            modelBuilder.Entity("Medico.Domain.Models.Allergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000);

                    b.Property<Guid>("PatientId");

                    b.Property<string>("Reaction")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("Medico.Domain.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("AdmissionId");

                    b.Property<string>("Allegations")
                        .HasMaxLength(2000);

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("CompanyId");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("LocationId");

                    b.Property<Guid?>("MedicoApplicationUserId");

                    b.Property<Guid>("NurseId");

                    b.Property<Guid>("PatientId");

                    b.Property<Guid>("PhysicianId");

                    b.Property<Guid>("RoomId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MedicoApplicationUserId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("Medico.Domain.Models.BaseVitalSigns", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("DominantHand")
                        .HasMaxLength(100);

                    b.Property<double?>("Height");

                    b.Property<double?>("LeftBicep");

                    b.Property<double?>("LeftCalf");

                    b.Property<double?>("LeftForearm");

                    b.Property<double?>("LeftThigh");

                    b.Property<double?>("OxygenAmount");

                    b.Property<string>("OxygenUse")
                        .HasMaxLength(100);

                    b.Property<Guid>("PatientId");

                    b.Property<double?>("RightBicep");

                    b.Property<double?>("RightCalf");

                    b.Property<double?>("RightForearm");

                    b.Property<double?>("RightThigh");

                    b.Property<double?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("BaseVitalSigns");
                });

            modelBuilder.Entity("Medico.Domain.Models.ChiefComplaint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ChiefComplaint");
                });

            modelBuilder.Entity("Medico.Domain.Models.ChiefComplaintKeyword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("ChiefComplaintKeyword");
                });

            modelBuilder.Entity("Medico.Domain.Models.ChiefComplaintRelatedKeyword", b =>
                {
                    b.Property<Guid>("ChiefComplaintId");

                    b.Property<Guid>("KeywordId");

                    b.HasKey("ChiefComplaintId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("ChiefComplaintRelatedKeyword");
                });

            modelBuilder.Entity("Medico.Domain.Models.ChiefComplaintTemplate", b =>
                {
                    b.Property<Guid>("ChiefComplaintId");

                    b.Property<Guid>("TemplateId");

                    b.HasKey("ChiefComplaintId", "TemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ChiefComplaintTemplate");
                });

            modelBuilder.Entity("Medico.Domain.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SecondaryAddress")
                        .HasMaxLength(2000);

                    b.Property<int>("State");

                    b.Property<string>("WebSiteUrl")
                        .HasMaxLength(2000);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Medico.Domain.Models.CptCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("CptCode");
                });

            modelBuilder.Entity("Medico.Domain.Models.DrugHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int?>("Amount");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Duration")
                        .HasMaxLength(100);

                    b.Property<string>("Frequency")
                        .HasMaxLength(100);

                    b.Property<int?>("Length");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000);

                    b.Property<Guid>("PatientId");

                    b.Property<bool?>("Quit");

                    b.Property<string>("Route")
                        .HasMaxLength(100);

                    b.Property<string>("Status")
                        .HasMaxLength(100);

                    b.Property<int?>("StatusLength");

                    b.Property<string>("StatusLengthType")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.Property<string>("Use")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("DrugHistory");
                });

            modelBuilder.Entity("Medico.Domain.Models.EducationHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000);

                    b.Property<Guid>("PatientId");

                    b.Property<int?>("YearCompleted");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("EducationHistory");
                });

            modelBuilder.Entity("Medico.Domain.Models.FamilyHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(2000);

                    b.Property<string>("FamilyMember")
                        .HasMaxLength(100);

                    b.Property<string>("FamilyStatus")
                        .HasMaxLength(100);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000);

                    b.Property<Guid>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("FamilyHistory");
                });

            modelBuilder.Entity("Medico.Domain.Models.IcdCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("IcdCode");
                });

            modelBuilder.Entity("Medico.Domain.Models.IcdCodeChiefComplaintKeyword", b =>
                {
                    b.Property<Guid>("IcdCodeId");

                    b.Property<Guid>("ChiefComplaintKeywordId");

                    b.HasKey("IcdCodeId", "ChiefComplaintKeywordId");

                    b.HasIndex("ChiefComplaintKeywordId");

                    b.ToTable("IcdCodeChiefComplaintKeyword");
                });

            modelBuilder.Entity("Medico.Domain.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SecondaryAddress")
                        .HasMaxLength(2000);

                    b.Property<int>("State");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Medico.Domain.Models.MedicalHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000);

                    b.Property<Guid>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalHistory");
                });

            modelBuilder.Entity("Medico.Domain.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000);

                    b.Property<Guid>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecord");
                });

            modelBuilder.Entity("Medico.Domain.Models.Medication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("DeaSchedule")
                        .HasMaxLength(2000);

                    b.Property<string>("DosageFormName")
                        .HasMaxLength(2000);

                    b.Property<string>("ElevenDigitNdcCode")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("NdcCode")
                        .HasMaxLength(2000);

                    b.Property<string>("NonProprietaryName")
                        .HasMaxLength(2000);

                    b.Property<string>("PackageDescription")
                        .HasMaxLength(4000);

                    b.Property<string>("PharmaceuticalClasses")
                        .HasMaxLength(4000);

                    b.Property<string>("RouteName")
                        .HasMaxLength(2000);

                    b.Property<string>("Status")
                        .HasMaxLength(2000);

                    b.Property<string>("StrengthNumber")
                        .HasMaxLength(2000);

                    b.Property<string>("StrengthUnit")
                        .HasMaxLength(4000);

                    b.Property<string>("SubstanceName")
                        .HasMaxLength(4000);

                    b.HasKey("Id");

                    b.ToTable("Medication");
                });

            modelBuilder.Entity("Medico.Domain.Models.MedicationHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("Dose")
                        .HasMaxLength(100);

                    b.Property<string>("DoseSchedule")
                        .HasMaxLength(100);

                    b.Property<string>("Medication")
                        .HasMaxLength(2000);

                    b.Property<string>("MedicationStatus")
                        .HasMaxLength(100);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000);

                    b.Property<Guid>("PatientId");

                    b.Property<bool?>("Prn");

                    b.Property<string>("Route")
                        .HasMaxLength(100);

                    b.Property<string>("Units")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicationHistory");
                });

            modelBuilder.Entity("Medico.Domain.Models.MedicoApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("CompanyId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("EmployeeType");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100);

                    b.Property<string>("NamePrefix")
                        .HasMaxLength(100);

                    b.Property<string>("NameSuffix")
                        .HasMaxLength(100);

                    b.Property<string>("PrimaryPhone")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SecondaryAddress")
                        .HasMaxLength(2000);

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(100);

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("State");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MedicoApplicationUser");
                });

            modelBuilder.Entity("Medico.Domain.Models.OccupationalHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("DisabilityClaimDetails")
                        .HasMaxLength(2000);

                    b.Property<string>("EmploymentStatus")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("End");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000);

                    b.Property<string>("OccupationalType")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<Guid>("PatientId");

                    b.Property<DateTime>("Start");

                    b.Property<string>("WorkersCompensationClaimDetails")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("OccupationalHistory");
                });

            modelBuilder.Entity("Medico.Domain.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("BaseVitalSignsId");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("CompanyId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("MaritalStatus");

                    b.Property<string>("MiddleName");

                    b.Property<Guid?>("PatientInsuranceId");

                    b.Property<string>("PrimaryAddress")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("PrimaryPhone")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SecondaryAddress")
                        .HasMaxLength(2000);

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(100);

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("State");

                    b.Property<string>("Zip")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PatientInsuranceId")
                        .IsUnique()
                        .HasFilter("[PatientInsuranceId] IS NOT NULL");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("Medico.Domain.Models.PatientInsurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("CaseNumber")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MiddleName");

                    b.Property<Guid>("PatientId");

                    b.Property<string>("PrimaryAddress")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("PrimaryPhone")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("RqId")
                        .HasMaxLength(100);

                    b.Property<string>("SecondaryAddress")
                        .HasMaxLength(2000);

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(100);

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("State");

                    b.Property<string>("Zip")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PatientInsurance");
                });

            modelBuilder.Entity("Medico.Domain.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("LocationId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Medico.Domain.Models.SelectableList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("CategoryId");

                    b.Property<Guid>("CompanyId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("JsonValues")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("SelectableList");
                });

            modelBuilder.Entity("Medico.Domain.Models.SelectableListCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("CompanyId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("SelectableListCategory");
                });

            modelBuilder.Entity("Medico.Domain.Models.SelectableListTrackItem", b =>
                {
                    b.Property<Guid>("TemplateId");

                    b.Property<Guid>("SelectableListId");

                    b.Property<int>("NumberOfSelectableListsInTemplate");

                    b.HasKey("TemplateId", "SelectableListId");

                    b.HasIndex("SelectableListId");

                    b.ToTable("SelectableListTrackItem");
                });

            modelBuilder.Entity("Medico.Domain.Models.SignatureInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("AdmissionId");

                    b.Property<bool>("IsUnsigned");

                    b.Property<Guid>("PhysicianId");

                    b.Property<DateTime>("SignDate");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionId")
                        .IsUnique();

                    b.HasIndex("PhysicianId");

                    b.ToTable("SignatureInfo");
                });

            modelBuilder.Entity("Medico.Domain.Models.SurgicalHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000);

                    b.Property<Guid>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("SurgicalHistory");
                });

            modelBuilder.Entity("Medico.Domain.Models.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("DefaultTemplateHtml");

                    b.Property<string>("DetailedTemplateHtml");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsHistorical");

                    b.Property<bool>("IsRequired");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("ReportTitle")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int?>("TemplateOrder");

                    b.Property<Guid>("TemplateTypeId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TemplateTypeId");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("Medico.Domain.Models.TemplateType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("CompanyId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPredefined");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("TemplateType");
                });

            modelBuilder.Entity("Medico.Domain.Models.TobaccoHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int?>("Amount");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Duration")
                        .HasMaxLength(100);

                    b.Property<string>("Frequency")
                        .HasMaxLength(100);

                    b.Property<int?>("Length");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000);

                    b.Property<Guid>("PatientId");

                    b.Property<bool?>("Quit");

                    b.Property<string>("Status")
                        .HasMaxLength(100);

                    b.Property<int?>("StatusLength");

                    b.Property<string>("StatusLengthType")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.Property<string>("Use")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("TobaccoHistory");
                });

            modelBuilder.Entity("Medico.Domain.Models.VitalSigns", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("AdmissionId");

                    b.Property<string>("BloodPressureLocation")
                        .HasMaxLength(100);

                    b.Property<string>("BloodPressurePosition")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateDate");

                    b.Property<double?>("DiastolicBloodPressure");

                    b.Property<string>("OxygenSaturationAtRest")
                        .HasMaxLength(100);

                    b.Property<double?>("OxygenSaturationAtRestValue");

                    b.Property<Guid>("PatientId");

                    b.Property<double?>("Pulse");

                    b.Property<int?>("RespirationRate");

                    b.Property<double?>("SystolicBloodPressure");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionId");

                    b.HasIndex("PatientId");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("Medico.Domain.Models.Admission", b =>
                {
                    b.HasOne("Medico.Domain.Models.Appointment", "Appointment")
                        .WithOne("Admission")
                        .HasForeignKey("Medico.Domain.Models.Admission", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithMany("Admissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Medico.Domain.Models.AlcoholHistory", b =>
                {
                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithMany("AlcoholHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.Allergy", b =>
                {
                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.Appointment", b =>
                {
                    b.HasOne("Medico.Domain.Models.Company", "Company")
                        .WithMany("Appointments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Medico.Domain.Models.Location", "Location")
                        .WithMany("Appointments")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Medico.Domain.Models.MedicoApplicationUser")
                        .WithMany("Appointments")
                        .HasForeignKey("MedicoApplicationUserId");

                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Medico.Domain.Models.Room", "Room")
                        .WithMany("Appointments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Medico.Domain.Models.BaseVitalSigns", b =>
                {
                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithOne("BaseVitalSigns")
                        .HasForeignKey("Medico.Domain.Models.BaseVitalSigns", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.ChiefComplaint", b =>
                {
                    b.HasOne("Medico.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.ChiefComplaintRelatedKeyword", b =>
                {
                    b.HasOne("Medico.Domain.Models.ChiefComplaint", "ChiefComplaint")
                        .WithMany("ChiefComplaintsKeywords")
                        .HasForeignKey("ChiefComplaintId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medico.Domain.Models.ChiefComplaintKeyword", "Keyword")
                        .WithMany("ChiefComplaintsKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.ChiefComplaintTemplate", b =>
                {
                    b.HasOne("Medico.Domain.Models.ChiefComplaint", "ChiefComplaint")
                        .WithMany("ChiefComplaintTemplates")
                        .HasForeignKey("ChiefComplaintId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Medico.Domain.Models.Template", "Template")
                        .WithMany("ChiefComplaintTemplates")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Medico.Domain.Models.DrugHistory", b =>
                {
                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithMany("DrugHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.EducationHistory", b =>
                {
                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithMany("EducationHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.FamilyHistory", b =>
                {
                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithMany("FamilyHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.IcdCodeChiefComplaintKeyword", b =>
                {
                    b.HasOne("Medico.Domain.Models.ChiefComplaintKeyword", "ChiefComplaintKeyword")
                        .WithMany("ChiefComplaintKeywordIcdCodes")
                        .HasForeignKey("ChiefComplaintKeywordId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Medico.Domain.Models.IcdCode", "IcdCode")
                        .WithMany("IcdCodeChiefComplaintKeywords")
                        .HasForeignKey("IcdCodeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Medico.Domain.Models.Location", b =>
                {
                    b.HasOne("Medico.Domain.Models.Company", "Company")
                        .WithMany("Locations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.MedicalHistory", b =>
                {
                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithMany("MedicalHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.MedicalRecord", b =>
                {
                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.MedicationHistory", b =>
                {
                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithMany("MedicationHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.MedicoApplicationUser", b =>
                {
                    b.HasOne("Medico.Domain.Models.Company", "Company")
                        .WithMany("MedicoApplicationUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.OccupationalHistory", b =>
                {
                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithMany("OccupationalHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.Patient", b =>
                {
                    b.HasOne("Medico.Domain.Models.Company", "Company")
                        .WithMany("Patients")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medico.Domain.Models.PatientInsurance", "PatientInsurance")
                        .WithOne("Patient")
                        .HasForeignKey("Medico.Domain.Models.Patient", "PatientInsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Medico.Domain.Models.Room", b =>
                {
                    b.HasOne("Medico.Domain.Models.Location", "Location")
                        .WithMany("Rooms")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.SelectableList", b =>
                {
                    b.HasOne("Medico.Domain.Models.SelectableListCategory", "Category")
                        .WithMany("SelectableLists")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medico.Domain.Models.Company", "Company")
                        .WithMany("SelectableLists")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Medico.Domain.Models.SelectableListCategory", b =>
                {
                    b.HasOne("Medico.Domain.Models.Company", "Company")
                        .WithMany("SelectableListCategories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.SelectableListTrackItem", b =>
                {
                    b.HasOne("Medico.Domain.Models.SelectableList", "SelectableList")
                        .WithMany("SelectableListTrackItems")
                        .HasForeignKey("SelectableListId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Medico.Domain.Models.Template", "Template")
                        .WithMany("SelectableListTrackItems")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Medico.Domain.Models.SignatureInfo", b =>
                {
                    b.HasOne("Medico.Domain.Models.Admission", "Admission")
                        .WithOne("SignatureInfo")
                        .HasForeignKey("Medico.Domain.Models.SignatureInfo", "AdmissionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Medico.Domain.Models.MedicoApplicationUser", "Physician")
                        .WithMany("Signatures")
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Medico.Domain.Models.SurgicalHistory", b =>
                {
                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithMany("SurgicalHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.Template", b =>
                {
                    b.HasOne("Medico.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medico.Domain.Models.TemplateType", "TemplateType")
                        .WithMany("Templates")
                        .HasForeignKey("TemplateTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Medico.Domain.Models.TemplateType", b =>
                {
                    b.HasOne("Medico.Domain.Models.Company", "Company")
                        .WithMany("TemplateTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.TobaccoHistory", b =>
                {
                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithMany("TobaccoHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medico.Domain.Models.VitalSigns", b =>
                {
                    b.HasOne("Medico.Domain.Models.Admission", "Admission")
                        .WithMany("VitalSigns")
                        .HasForeignKey("AdmissionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Medico.Domain.Models.Patient", "Patient")
                        .WithMany("VitalSigns")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
